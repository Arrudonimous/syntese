generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String
  password String
  createdAt DateTime @default(now())
  abstracts Abstract[]
  quotes Quote[]
  logs Log[]
  flashcardDecks FlashcardDeck[]
}


model Abstract {
  id            String       @id @default(uuid())
  title         String
  description   String
  wordsCount    Int
  originalWordsCount    Int
  abstractType  AbstractType @relation(fields: [abstractTypeID], references: [id])
  abstractTypeID Int
  user          User         @relation(fields: [userID], references: [id])
  userID        String
  createdAt     DateTime     @default(now())
  tags          String[]     // Adiciona o campo de tags como um array de strings
}


model AbstractType{
  id    Int @id @default(autoincrement())
  type  String
  abstracts Abstract[]
}

model Quote {
  id            String       @id @default(uuid())
  title         String
  description   String
  quoteType     String
  user          User         @relation(fields: [userID], references: [id])
  userID        String
  createdAt     DateTime     @default(now())
  tags          String[]     
}


model Log {
  id            String       @id @default(uuid())
  description   String
  logType       Int
  user          User         @relation(fields: [userID], references: [id])
  userID        String
  createdAt     DateTime     @default(now())
}


model FlashcardDeck {
  id          String   @id @default(uuid())
  title       String
  description String
  category    String
  user        User     @relation(fields: [userID], references: [id])
  userID      String
  createdAt   DateTime @default(now())
  lastUpdated DateTime
  cards       Card[]   @relation("DeckCards")
}

model Card {
  id        String        @id @default(uuid())
  front     String
  back      String
  read      Boolean
  deck      FlashcardDeck @relation("DeckCards", fields: [deckID], references: [id], onDelete: Cascade)
  deckID    String
  createdAt DateTime      @default(now())
}